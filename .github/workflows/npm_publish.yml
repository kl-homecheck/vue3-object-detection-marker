name: Publish to NPM

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      src-changed: ${{ steps.changes.outputs.src-changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for source changes
        id: changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -E '^(src/|package\.json|vite\.config\.ts|tsconfig\.json)'; then
            echo "src-changed=true" >> $GITHUB_OUTPUT
          else
            echo "src-changed=false" >> $GITHUB_OUTPUT
          fi

  publish:
    needs: check-changes
    if: needs.check-changes.outputs.src-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Update npm to latest version
        run: npm install -g npm@latest

      - name: Install dependencies
        run: npm ci

      - name: Build library
        run: npm run build

      - name: Get current version
        id: get-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check if version exists on NPM
        id: check-version
        run: |
          if npm view vue3-object-detection-marker@${{ steps.get-version.outputs.version }} version 2>/dev/null; then
            echo "version-exists=true" >> $GITHUB_OUTPUT
          else
            echo "version-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Increment version
        if: steps.check-version.outputs.version-exists == 'true'
        run: |
          npm version patch --no-git-tag-version
          echo "new-version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        id: increment-version

      - name: Publish to NPM
        run: npm publish --access public

      - name: Get final version
        id: final-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.final-version.outputs.version }}" -m "Release v${{ steps.final-version.outputs.version }}"
          git push origin "v${{ steps.final-version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.final-version.outputs.version }}
          release_name: Release v${{ steps.final-version.outputs.version }}
          body: |
            Auto-generated release for version ${{ steps.final-version.outputs.version }}
            
            Changes in this release:
            - Updated source code
            - See commit history for detailed changes
          draft: false
          prerelease: false 
